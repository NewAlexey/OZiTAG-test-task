(()=>{"use strict";var e={373:(e,t,n)=>{n.r(t)},434:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(933)),o=i(n(831)),l=i(n(357)),a=i(n(478)),d=n(668),r=i(n(782)),c=i(n(533)),u=i(n(599)),h=i(n(510));t.default=class{constructor(e){this.rootElement=e,this.bindedFunctionHandleClickApplyButton=this.handleClickApplyButton.bind(this),this.funcHandleClickClearButton=this.clearHeaderAndSetItemsIsntCheked.bind(this),this.contentContainer=document.createElement("div"),this.contentContainer.classList.add("list-component"),this.headerListComponent=new o.default,this.optionsListComponent=new a.default,this.inputComponent=new l.default,this.buttonsComponent=new s.default,this.rootElement.append(this.contentContainer),this.contentContainer.append(this.headerListComponent.element),this.contentContainer.append(this.inputComponent.element),this.optionsListContainer=null,this.setCheckedOption(),this.setVisibleIfIsCheckedElements(),this.windowSize=h.default(),this.addListenersToElements()}setCheckedOption(){this.headerListComponent.countCheckedOptions=this.optionsListComponent.checkedOptionsData.size,this.headerListComponent.setNewValueInCountElement(),this.headerListComponent.hideInformationIfSelectedEmpty()}setVisibleIfIsCheckedElements(){const{inputElement:e}=this.inputComponent,t=this.inputComponent.element,n=this.optionsListComponent.allOptionsItems.find((e=>e.isChecked));n?this.inputComponent.setPlaceholderAndClass(n):this.inputComponent.setDefaultPlaceholderAndRemoveClass(),!e.value&&n?t.classList.add("input-container-selected-option"):t.classList.remove("input-container-selected-option")}addListenersToElements(){this.inputComponent.element.querySelector("input").addEventListener("click",this.getOptionsList.bind(this)),this.inputComponent.element.querySelector("input").addEventListener("input",this.handleChangeInputValue.bind(this)),this.headerListComponent.element.querySelector(".selected-elements").addEventListener("click",this.setAllOptionIsShowAndShowOnScreen.bind(this)),window.addEventListener("resize",this.handleResizeScreen.bind(this))}setAllOptionIsShowAndShowOnScreen(){const e=this.optionsListComponent.allOptionsItems.map((e=>{const t=e;return t.isShown=!0,t.isOpen=!0,t}));this.optionsListComponent.allOptionsItems=[...e],this.getOptionsList()}getOptionsList(){const e=this.optionsListComponent.getAllOptionsAsString();e&&this.showOptionsListOnScreen(e)}showOptionsListOnScreen(e){this.optionsListContainer=r.default("div","","options-list-information-container"),this.contentContainer.append(this.optionsListContainer),this.optionsListContainer.addEventListener("click",this.handleClickOptionsListContainer.bind(this)),this.optionsListContainer.innerHTML=e,this.contentContainer.append(this.buttonsComponent.element),this.addListenersToButtons()}removeOptionListFromScreen(){this.optionsListContainer?.removeEventListener("click",this.handleClickOptionsListContainer.bind(this)),this.optionsListContainer?.remove(),this.removeListenersToButtons(),this.buttonsComponent.element.remove()}addListenersToButtons(){this.buttonsComponent.element.querySelector(".button-apply")?.addEventListener("click",this.bindedFunctionHandleClickApplyButton),this.buttonsComponent.element.querySelector(".button-clear")?.addEventListener("click",this.funcHandleClickClearButton)}removeListenersToButtons(){this.buttonsComponent.element.querySelector(".button-apply")?.removeEventListener("click",this.bindedFunctionHandleClickApplyButton),this.buttonsComponent.element.querySelector(".button-clear")?.removeEventListener("click",this.funcHandleClickClearButton)}handleClickApplyButton(){const e=[...this.optionsListComponent.checkedOptionsData].join(", ");e?(alert(`Выбраны следующие элементы - ${e}`),this.clearHeaderAndSetItemsIsntCheked(),this.showAndClearAllOptionsList()):alert("Ничего не выбрано")}showAndClearAllOptionsList(){const e=this.optionsListComponent.allOptionsItems;e.forEach((e=>{e.isShown=!0,e.isBoldNeeded=!1,e.isChecked=!1,e.isOpen=!0})),this.removeOptionListFromScreen();const t=c.default(e,this.optionsListComponent.checkedOptionsData);this.showOptionsListOnScreen(t)}clearCheckedOptions(){[...this.contentContainer.querySelectorAll("input")].forEach((e=>{e.checked=!1,e.removeAttribute("checked")})),[...this.contentContainer.querySelectorAll(".option-item ")].forEach((e=>{e.classList.remove("background-selected-option")})),this.inputComponent.setDefaultPlaceholderAndRemoveClass(),this.optionsListComponent.setOptionToIsntChecked()}clearCheckedOptionsFromHeaderComponent(){this.optionsListComponent.checkedOptionsData.clear(),this.headerListComponent.countCheckedOptions=0,this.headerListComponent.setNewValueInCountElement()}clearBoldAndIsShownFieldsInOptionsList(){const e=this.optionsListComponent.allOptionsItems;return e.forEach((e=>{e.isShown=!0,e.isBoldNeeded=!1})),e}showOptionsListAccordingToSearchResult(e,t){if(e){t.forEach((t=>{const n=t.option.innerText.toLowerCase();n.includes(e)||(t.isShown=!1),e.length>=d.MIN_BOLD_VALUE_LENGTH&&n.includes(e)&&(t.isBoldNeeded=!0)}));const n=t.filter((e=>e.isShown)),i=c.default(n,this.optionsListComponent.checkedOptionsData,e);this.removeOptionListFromScreen(),this.showOptionsListOnScreen(i)}else{this.removeOptionListFromScreen();const e=c.default(t,this.optionsListComponent.checkedOptionsData);this.showOptionsListOnScreen(e)}}handleChangeInputValue(e){const t=e.target.value,n=this.clearBoldAndIsShownFieldsInOptionsList();this.showOptionsListAccordingToSearchResult(t,n)}clearHeaderAndSetItemsIsntCheked(){this.inputComponent.clearInputValueAndPlaceholder(),this.clearCheckedOptions(),this.clearCheckedOptionsFromHeaderComponent()}handleClickOptionsListContainer(e){const t=e.target;if("span"!==t.localName){if(t.classList.contains("arrow-up")){const n=u.default(t);return t.classList.contains("arrow-down")?(this.setShownOptionsList(n,!0),void e.preventDefault()):(this.setShownOptionsList(n,!1),void e.preventDefault())}"label"===t.localName&&(t.parentElement.classList.toggle("background-selected-option"),this.checkedOptionListItem(t),this.setVisibleIfIsCheckedElements())}else e.preventDefault()}setShownOptionsList(e,t){const n=[...this.optionsListComponent.allOptionsItems],i=n.map((n=>n.dataValue===e?(n.isOpen=t,n):n)).find((t=>t.dataValue===e));this.optionsListComponent.setChildrenIsOptionsList(i,n,t),this.optionsListComponent.isShownOptions=!1,this.optionsListContainer?.remove(),this.getOptionsList()}checkedOptionListItem(e){const t=u.default(e);this.optionsListComponent.allOptionsItems=this.optionsListComponent.allOptionsItems.map((e=>(t===e.dataValue&&(e.isChecked=!e.isChecked),e))),this.optionsListComponent.isOptionInCheckedList(t)?(this.optionsListComponent.removeCheckedOption(t),this.headerListComponent.countCheckedOptions-=1):(this.optionsListComponent.addCheckedOption(t),this.headerListComponent.countCheckedOptions+=1),this.headerListComponent.setNewValueInCountElement()}handleResizeScreen(){const e=h.default();if(e!==this.windowSize&&(this.windowSize=e,this.optionsListComponent.isShownOptions)){const e=this.inputComponent.inputElement.value,t=this.clearBoldAndIsShownFieldsInOptionsList();this.showOptionsListAccordingToSearchResult(e,t)}}}},5:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e="div",t=[]){this.element=document.createElement(e),this.element.classList.add(...t)}}},935:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(5));class o extends s.default{constructor(e){super("div",["button-add-new-select"]),this.rootElement=e,this.element.innerText="Добавить новый компонент",this.rootElement.append(this.element)}}t.default=o},933:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(5));class o extends s.default{constructor(){super("div",["buttons-container"]),this.element.innerHTML='\n    <div class="button-apply"> применить </div>\n    <div class="button-clear"> очистить </div>\n    '}}t.default=o},831:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(5));class o extends s.default{constructor(){super("div",["list-header"]),this.countCheckedOptions=0,this.element.innerHTML=`\n    <p> Тендеры в роли поставщика </p>\n    <p class="selected-elements visually-hidden"> Показать выбранное \n      (<span>${this.countCheckedOptions}</span>)\n    </p>\n    `,this.hideInformationIfSelectedEmpty(),this.spanCounter=this.element.querySelector("span")}setNewValueInCountElement(){this.spanCounter.innerText=`${this.countCheckedOptions}`,this.hideInformationIfSelectedEmpty()}hideInformationIfSelectedEmpty(){const e=this.element.querySelector(".selected-elements");0===this.countCheckedOptions?e.classList.add("visually-hidden"):e.classList.remove("visually-hidden")}}t.default=o},357:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=n(668),o=i(n(5));class l extends o.default{constructor(){super("div",["input-container"]),this.element.innerHTML='\n    <input class="input-search" type="text" placeholder="Код ОКРБ или наименование закупаемой продукции">\n    ',this.inputElement=this.element.querySelector("input")}setPlaceholderAndClass(e){this.inputElement.placeholder=e.option.text,this.inputElement.classList.add("placeholder-not-empty")}setDefaultPlaceholderAndRemoveClass(){this.inputElement.placeholder=s.DEFAULT_PLACEHOLDER,this.inputElement.classList.remove("placeholder-not-empty")}clearInputValueAndPlaceholder(){this.setDefaultPlaceholderAndRemoveClass(),this.inputElement.value=""}}t.default=l},478:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(533)),o=i(n(779)),l=i(n(734)),a=i(n(266)),d=i(n(920));t.default=class{constructor(){this.checkedOptionsData=new Set,this.isShownOptions=!1,this.allOptionsItems=this.getAllOptionsItem()}getAllOptionsItem(){const e=[...document.getElementById("select-1").querySelectorAll("option")].map((e=>{const t={};return t.option=e,t.isArrowNeeded=!1,t.isOpen=!0,t.isChecked=!1,t.isBoldNeeded=!1,t.isShown=!0,t.dataLevel=+e.getAttribute("data-level"),t.dataValue=`${e.value}${o.default()}`,t.childrenIndex=[],null!==e.getAttribute("selected")&&(this.checkedOptionsData.add(t.dataValue),e.removeAttribute("selected"),t.isChecked=!0),t})),t=a.default(e),n=l.default(t);return d.default(n,this.checkedOptionsData)}setOptionToIsntChecked(){this.allOptionsItems.forEach((e=>{e.isChecked=!1}))}setChildrenIsOptionsList(e,t,n){const i=t.map((t=>(e.childrenIndex?.forEach((e=>{e.dataValue===t.dataValue&&(t.isShown=n,t.isOpen=n)})),t)));this.allOptionsItems=[...i]}getAllOptionsAsString(e=this.allOptionsItems){if(!this.isShownOptions)return this.isShownOptions=!0,s.default(e,this.checkedOptionsData)}isOptionInCheckedList(e){return this.checkedOptionsData.has(e)}addCheckedOption(e){this.checkedOptionsData.add(e)}removeCheckedOption(e){this.checkedOptionsData.delete(e)}}},700:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(n(434)),o=i(n(935));function l(){const e=document.querySelector(".container"),t=document.createElement("div");t.classList.add("select-component"),e.append(t),new s.default(t)}n(373),window.onload=()=>{const e=document.querySelector(".select-component");if(!e)throw Error("App root element not found");new s.default(e),new o.default(e).element.addEventListener("click",l)}},668:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EWindowSize=t.MARGIN_PX_IF_ARROW_IS_NEEDED=t.MARGIN_PX_OPTION_LIST_ITEM=t.MIN_BOLD_VALUE_LENGTH=t.DEFAULT_PLACEHOLDER=void 0,t.DEFAULT_PLACEHOLDER="Код ОКРБ или наименование закупаемой продукции",t.MIN_BOLD_VALUE_LENGTH=1,t.MARGIN_PX_OPTION_LIST_ITEM=15,t.MARGIN_PX_IF_ARROW_IS_NEEDED=25,(n=t.EWindowSize||(t.EWindowSize={})).LARGE="LARGE",n.MEDIUM="MEDIUM",n.SMALL="SMALL"},782:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){const i=document.createElement(e);return t&&(i.innerText=t),n&&i.classList.add(n),i}},533:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(668);function s(e,t){const n=[];let i=-1;for(;-1!==(i=e.toLocaleLowerCase().indexOf(t,i+1));)n.push(i);return n}function o(e,t,n,o=""){return`<div class="option-item ${function(e){switch(e.dataLevel){case 6:return"sixth-level";case 5:return"fifth-level";case 4:return"fourth-level";case 3:return"third-level";default:return""}}(t)}${n.has(t.dataValue)?"background-selected-option":""}">\n            ${function(e,t){return t.has(e)?`<input type="checkbox" id="value-${e}" class="custom-checkbox" checked="checked">`:`<input type="checkbox" id="value-${e}" class="custom-checkbox">`}(t.dataValue,n)}\n            <label for="value-${t.dataValue}" data-value="value-${t.dataValue}">\n            ${t.isArrowNeeded&&t.isOpen?`<div class="option-dot" data-value="value-${t.dataValue}"></div>`:""}\n            <span style="margin-left: ${e}px; \n            left: ${t.isArrowNeeded?0:i.MARGIN_PX_IF_ARROW_IS_NEEDED}px" \n            data-value="value-${t.dataValue}">\n              ${t.isArrowNeeded?`<div class="arrow-up ${t.isOpen?"":"arrow-down"}" data-value="value-${t.dataValue}"></div>\n                    ${function(e){return e.isShown?`<div class="vertical-line" style="height:${function(e){let t=0;return e.childrenIndex?.forEach((e=>{e.isShown&&(t+=function(){const{clientWidth:e}=document.documentElement;return e<=500?100:e<=650?60:45}())})),t}(e)}px"></div>`:""}(t)}`:""}\n              ${t.isBoldNeeded?function(e,t){let n=s(e,t),i=e;for(let e=0;e<n.length;e+=1)i=i.slice(0,n[e])+"<b>"+i.slice(n[e],n[e]+t.length)+"</b>"+i.slice(n[e]+t.length),n=s(i,t);return i}(t.option.innerText,o):t.option.innerText}\n              </span>\n            </label>\n          </div>`}t.default=function(e,t,n=""){let s=0;return e.reduce(((e,l,a,d)=>{const r=l.option.getAttribute("data-level");if(!l.isShown)return e;if(!r)return s=0,e+o(s,l,t,n);const c=d[a-1]?.option.getAttribute("data-level");return c?c===r?e+=o(s,l,t,n):c<r?(s+=i.MARGIN_PX_OPTION_LIST_ITEM,e+=o(s,l,t,n)):c>r?(s-=i.MARGIN_PX_OPTION_LIST_ITEM,e+=o(s,l,t,n)):e:(s=i.MARGIN_PX_OPTION_LIST_ITEM,e+=o(s,l,t,n))}),"")}},779:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=function(){let e=0;return function(){return e+=1,e}}();t.default=n},599:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.getAttribute("data-value").split("-")[1]}},510:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(668);t.default=function(){const{clientWidth:e}=document.documentElement;return e<=500?i.EWindowSize.SMALL:e<=650?i.EWindowSize.MEDIUM:i.EWindowSize.LARGE}},734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(let t=1;t<e.length;t+=1){let n=t;for(;e[t]?.dataLevel<e[n+1]?.dataLevel;)e[t].childrenIndex.push(e[n+1]),n+=1}return e}},266:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.map(((t,n)=>{const i=e[n+1]?.option.getAttribute("data-level");if(!i)return t;if(i){const s=e[n]?.option.getAttribute("data-level");if(!s||+s!=+i&&+s<+i){const e=t;return e.isArrowNeeded=!0,e}}return t}))}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.map((e=>{if(t.has(e.dataValue)){const t=e;return t.isChecked=!0,t}return e}))}}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(700)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,